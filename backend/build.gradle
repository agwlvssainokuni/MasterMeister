plugins {
    id 'java-library'
    id 'war'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'cherry.mastermeister'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-Xlint:unchecked', '-Xlint:deprecation']
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // Database
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    runtimeOnly 'org.postgresql:postgresql'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'

    // Connection Pooling
    implementation 'com.zaxxer:HikariCP'
    
    // Apache Commons
    implementation 'org.apache.commons:commons-lang3'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
}

// Frontend build integration
tasks.register("frontendNpmInstall", Exec) {
    onlyIf { project.hasProperty('frontend') }
    workingDir '../frontend'
    commandLine 'npm', 'install'
}

tasks.register("frontendBuild", Exec) {
    onlyIf { project.hasProperty('frontend') }
    workingDir '../frontend'
    commandLine 'npm', 'run', 'build'
    dependsOn frontendNpmInstall
}

// Ensure frontend is built before backend build when frontend property is set
processResources {
    if (project.hasProperty('frontend')) {
        dependsOn frontendBuild
    }
}
